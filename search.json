[{"path":"https://alexslemonade.github.io/ScPCAr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"BSD 3-Clause License","title":"BSD 3-Clause License","text":"Copyright (c) 2025, Alex’s Lemonade Stand Foundation Redistribution use source binary forms, without modification, permitted provided following conditions met: Redistributions source code must retain copyright notice, list conditions following disclaimer. Redistributions binary form must reproduce copyright notice, list conditions following disclaimer documentation /materials provided distribution. Neither name Alex’s Lemonade Stand Foundation names contributors may used endorse promote products derived software without specific prior written permission. SOFTWARE PROVIDED COPYRIGHT HOLDERS CONTRIBUTORS “” EXPRESS IMPLIED WARRANTIES, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE DISCLAIMED. EVENT SHALL COPYRIGHT HOLDER CONTRIBUTORS LIABLE DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, LIMITED , PROCUREMENT SUBSTITUTE GOODS SERVICES; LOSS USE, DATA, PROFITS; BUSINESS INTERRUPTION) HOWEVER CAUSED THEORY LIABILITY, WHETHER CONTRACT, STRICT LIABILITY, TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING WAY USE SOFTWARE, EVEN ADVISED POSSIBILITY DAMAGE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua . Shapiro. Author, maintainer. Stephanie J. Spielman. Author. Alex's Lemonade Stand Foundation. Copyright holder, funder.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hawkins AG, Shapiro JA, Spielman SJ, Mejia DS, Venkatesh Prasad D, Ichihara N, Yakovets , Gottlieb , Wheeler KG, Bethell CJ, Foltz SM, O'Malley J, Greene CS, Taroni JN (2025). “Single-cell Pediatric Cancer Atlas: Data portal open-source tools single-cell transcriptomics pediatric tumors.” bioRxiv. doi:10.1101/2024.04.19.590243, https://www.biorxiv.org/content/early/2025/05/28/2024.04.19.590243.","code":"@Article{,   author = {Allegra G. Hawkins and Joshua A. Shapiro and Stephanie J. Spielman and David S. Mejia and Deepashree {Venkatesh Prasad} and Nozomi Ichihara and Arkadii Yakovets and Avrohom M. Gottlieb and Kurt G. Wheeler and Chante J. Bethell and Steven M. Foltz and Jennifer O'Malley and Casey S. Greene and Jaclyn N. Taroni},   title = {The Single-cell Pediatric Cancer Atlas: Data portal and open-source tools for single-cell transcriptomics of pediatric tumors},   year = {2025},   doi = {10.1101/2024.04.19.590243},   publisher = {Cold Spring Harbor Laboratory},   abstract = {The Single-cell Pediatric Cancer Atlas (ScPCA) Portal (https://scpca.alexslemonade.org/) is a data resource for uniformly processed single-cell and single-nuclei RNA sequencing (RNA-seq) data and de-identified metadata from pediatric tumor samples. Originally comprised of data from 10 projects funded by Alex{\textquoteright}s Lemonade Stand Foundation (ALSF), the Portal currently contains summarized gene expression data for over 700 samples across 55 cancer types from ALSF-funded and community-contributed datasets. Downloads include gene expression data as SinglecellExperiment or AnnData objects containing raw and normalized counts, PCA and UMAP coordinates, and automated cell type annotations, along with summary reports. Some samples have additional data from bulk RNA-seq, spatial transcriptomics, and/or feature barcoding (e.g., CITE-seq and cell hashing) included in the download. All data on the Portal were uniformly processed using scpca-nf, an efficient and open-source Nextflow workflow that uses alevin-fry to quantify gene expression. Comprehensive documentation, including descriptions of file contents and a guide to getting started, is available at https://scpca.readthedocs.io.},   url = {https://www.biorxiv.org/content/early/2025/05/28/2024.04.19.590243},   journal = {bioRxiv}, }"},{"path":"https://alexslemonade.github.io/ScPCAr/index.html","id":"scpcar","dir":"","previous_headings":"","what":"Interact with the ScPCA Portal API","title":"Interact with the ScPCA Portal API","text":"R package interacting Single-cell Pediatric Cancer Atlas (ScPCA) Portal API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/check_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the ScPCA API is reachable — check_api","title":"Check if the ScPCA API is reachable — check_api","text":"function performs simple GET request ScPCA API verify reachable.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/check_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the ScPCA API is reachable — check_api","text":"","code":"check_api()"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/check_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the ScPCA API is reachable — check_api","text":"TRUE API reachable, otherwise error raised.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to create a filtering list for computed files by format — computed_files_filter","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"Helper function create filtering list computed files format","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"","code":"computed_files_filter(   format_str = c(\"SINGLE_CELL_EXPERIMENT\", \"ANN_DATA\", \"SPATIAL\") )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"format_str string indicating desired format","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"list suitable passing filters argument get_computed_file_ids().","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and extract a single file from a URL — download_and_extract_file","title":"Download and extract a single file from a URL — download_and_extract_file","text":"Download extract single file URL","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and extract a single file from a URL — download_and_extract_file","text":"","code":"download_and_extract_file(url, parent_dir, overwrite, redownload, quiet)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and extract a single file from a URL — download_and_extract_file","text":"url download URL parent_dir parent directory files extracted overwrite Whether overwrite existing directories redownload Whether re-download files url already exist (FALSE, existing files returned) quiet Whether suppress progress messages","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and extract a single file from a URL — download_and_extract_file","text":"character vector extracted file paths","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a project's data files from the ScPCA Portal — download_project","title":"Download a project's data files from the ScPCA Portal — download_project","text":"Download project's data files ScPCA Portal","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a project's data files from the ScPCA Portal — download_project","text":"","code":"download_project(   project_id,   auth_token,   destination = \"scpca_data\",   format = \"sce\",   merged = FALSE,   include_multiplexed = NULL,   overwrite = FALSE,   redownload = FALSE,   quiet = FALSE )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a project's data files from the ScPCA Portal — download_project","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") auth_token authorization token obtained get_auth() destination path directory unzipped file directory saved. Default \"scpca_data\". format desired file format, either \"sce\" (SingleCellExperiment), \"anndata\" (AnnData/H5AD), \"spatial\" (spatial data Space Ranger format). Default \"sce\". merged Download merged data files, available. Default FALSE. include_multiplexed Include multiplexed samples, available. Default TRUE SingleCellExperiment FALSE AnnData spatial samples, multiplexed data available. overwrite Whether overwrite files existing directories already exist. Note files existing directories name one downloaded files deleted. Default FALSE. redownload Whether re-download files project format already exist. FALSE, existing files returned. Default FALSE. quiet Whether suppress download progress messages. Default FALSE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a project's data files from the ScPCA Portal — download_project","text":"vector file paths downloaded files (invisibly)","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a project's data files from the ScPCA Portal — download_project","text":"","code":"if (FALSE) { # \\dontrun{ # Get a token first auth_token <- get_auth(\"me@email.net\", agree = TRUE) # Then ask for a sample download download_project(\"SCPCS000001\", auth_token, destination = \"scpca_data\", format = \"sce\")  # Downloading merged files in AnnData format download_project(   \"SCPCS000001\",   auth_token,   destination = \"scpca_data\",   format = \"anndata\",   merged = TRUE ) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a sample's data files from the ScPCA Portal — download_sample","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"function downloads data files specified sample ScPCA Portal. downloaded files saved subdirectory specified path, named base filename downloaded zip file, includes sample ID, modality, format, date.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"","code":"download_sample(   sample_id,   auth_token,   destination = \"scpca_data\",   format = \"sce\",   overwrite = FALSE,   redownload = FALSE,   quiet = FALSE )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"sample_id ScPCA sample ID (e.g. \"SCPCS000001\") auth_token authorization token obtained get_auth() destination path directory unzipped file directory saved. Default \"scpca_data\". format desired file format, either \"sce\" (SingleCellExperiment), \"anndata\" (AnnData/H5AD), \"spatial\" (spatial data Space Ranger format). Default \"sce\". overwrite Whether overwrite files existing directories already exist. Note files existing directories name one downloaded files deleted. Default FALSE. redownload Whether re-download files sample format already exist. FALSE, existing files returned. Default FALSE. quiet Whether suppress download progress messages. Default FALSE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"vector file paths downloaded files (invisibly)","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"single-cell single-nuclei data, files can downloaded either SingleCellExperiment (\"sce\") AnnData (\"anndata\") format, downloads include unfiltered, filtered, processed data objects, well associated metadata QC files. Spatial data, present, can downloaded Space Ranger format using \"spatial\" format option. function returns vector file paths downloaded files (invisibly). Note downloading data requires authorization token, can obtained using get_auth() function.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"","code":"if (FALSE) { # \\dontrun{ # Get a token first auth_token <- get_auth(\"me@email.net\", agree = TRUE) # Then ask for a sample download download_sample(\"SCPCS000001\", auth_token, destination = \"scpca_data\", format = \"sce\")  # Downloading in AnnData format download_sample(\"SCPCS000001\", auth_token, destination = \"scpca_data\", format = \"anndata\") } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an authorization token from the ScPCA API — get_auth","title":"Get an authorization token from the ScPCA API — get_auth","text":"Get authorization token ScPCA API","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an authorization token from the ScPCA API — get_auth","text":"","code":"get_auth(email, agree = FALSE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an authorization token from the ScPCA API — get_auth","text":"email user's email address agree logical indicating whether user agrees terms service","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an authorization token from the ScPCA API — get_auth","text":"string containing authorization token","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an authorization token from the ScPCA API — get_auth","text":"","code":"if (FALSE) { # \\dontrun{ # Get a token (make sure to agree to the terms of service) auth_token <- get_auth(\"me@email.net\", agree = TRUE) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"Get computed file ids sample info list, optionally filtered criteria","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"","code":"get_computed_file_ids(info_list, filters = list())"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"info_list list object includes \"computed_files\" element, returned get_sample_info() get_project_info() filters named list filtering criteria, names fields computed_files objects, values desired values match. Values can negated prefixing \"!\". example, get non-spatial computed files SingleCellExperiment format, use: list(format = \"SINGLE_CELL_EXPERIMENT\", modality = \"!SPATIAL\").","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"character vector computed file ids matching filtering criteria","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get project metadata by project ID — get_project_info","title":"Get project metadata by project ID — get_project_info","text":"Get project metadata project ID","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get project metadata by project ID — get_project_info","text":"","code":"get_project_info(project_id, simplifyVector = FALSE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get project metadata by project ID — get_project_info","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") simplifyVector Simplify returned list structure, creating vectors data frames instead lists possible. Default FALSE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get project metadata by project ID — get_project_info","text":"nested list project metadata ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get project metadata by project ID — get_project_info","text":"","code":"if (FALSE) { # \\dontrun{ # Get metadata for a specific project project_info <- get_project_info(\"SCPCP000001\") } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata for all libraries in a given project — get_project_libraries","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"function downloads reads library metadata file given ScPCA project. data frame returned project metadata file available ScPCA Portal website project, including information library part project.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"","code":"get_project_libraries(project_id, auth_token)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") auth_token authorization token obtained get_auth()","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"data frame (tibble) library metadata specified project.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"","code":"if (FALSE) { # \\dontrun{ # First get an auth token token <- get_auth(\"me@email.net\", agree = TRUE) # Get library metadata for a specific project libraries_df <- get_project_libraries(\"SCPCP000001\", token) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get project metadata download URL — get_project_metadata_url","title":"Get project metadata download URL — get_project_metadata_url","text":"Get project metadata download URL","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get project metadata download URL — get_project_metadata_url","text":"","code":"get_project_metadata_url(project_id, auth_token)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get project metadata download URL — get_project_metadata_url","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") auth_token authorization token obtained get_auth()","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get project metadata download URL — get_project_metadata_url","text":"signed download URL project metadata file found ScPCA Portal.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get project metadata download URL — get_project_metadata_url","text":"","code":"if (FALSE) { # \\dontrun{ # First get an auth token token <- get_auth(\"me@email.net\", agree = TRUE) # Get metadata for a specific project project_info <- get_project_metadata_url(\"SCPCP000001\", token) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame of all samples in a given project — get_project_samples","title":"Get a data frame of all samples in a given project — get_project_samples","text":"function retrievs data frame biological samples associated SCPCA project, including sample-level metadata. default, list columns removed create simplified data frame, can disabled setting simplify = FALSE. unsimplified data frame contains nested list columns additional details, experimental modalities associated sample.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame of all samples in a given project — get_project_samples","text":"","code":"get_project_samples(project_id, simplify = TRUE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a data frame of all samples in a given project — get_project_samples","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") simplify logical indicating whether simplify resulting data frame removing list columns. Default TRUE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame of all samples in a given project — get_project_samples","text":"data frame sample information specified project ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a data frame of all samples in a given project — get_project_samples","text":"","code":"if (FALSE) { # \\dontrun{ # Get sample info for a specific project samples_df <- get_project_samples(\"SCPCP000001\")  # Get sample info without simplifying samples_df_full <- get_project_samples(\"SCPCP000001\", simplify = FALSE) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample metadata by sample ID — get_sample_info","title":"Get sample metadata by sample ID — get_sample_info","text":"Get sample metadata sample ID","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample metadata by sample ID — get_sample_info","text":"","code":"get_sample_info(sample_id, simplifyVector = FALSE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample metadata by sample ID — get_sample_info","text":"sample_id ScPCA sample ID (e.g. \"SCPCS000001\") simplifyVector Simplify returned list structure, creating vectors data frames instead lists possible. Default FALSE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sample metadata by sample ID — get_sample_info","text":"nested list sample metadata ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sample metadata by sample ID — get_sample_info","text":"","code":"if (FALSE) { # \\dontrun{ # Get metadata for a specific sample sample_info <- get_sample_info(\"SCPCS000001\") } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"Helper function iterating paginated ScPCA API results","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"","code":"iterate_scpca(resp, req)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"resp httr2 response object req httr2 request object","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"updated httr2 request object next page, NULL pages","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the base filename from a ScPCA portal download URL — parse_download_file","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"(may become obsolete get download filenames API response)","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"","code":"parse_download_file(scpca_url)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"scpca_url ScPCA portal download URL","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"download filename","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data frame of all ScPCA projects — scpca_projects","title":"Get data frame of all ScPCA projects — scpca_projects","text":"retrieves full list projects ScPCA Portal returns data frame project metadata. default, list columns removed create simplified data frame, can disabled setting simplify = FALSE. unsimplified data frame contains nested list columns additional details samples within project, set diagnoses associated project individual sample ids.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data frame of all ScPCA projects — scpca_projects","text":"","code":"scpca_projects(simplify = TRUE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data frame of all ScPCA projects — scpca_projects","text":"simplify logical indicating whether simplify resulting data frame removing list columns. Default TRUE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data frame of all ScPCA projects — scpca_projects","text":"data frame project information ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data frame of all ScPCA projects — scpca_projects","text":"","code":"if (FALSE) { # \\dontrun{ # a simplified data frame of all projects project_df <- scpca_projects()  # a data frame of all projects without simplification project_df_full <- scpca_projects(simplify = FALSE) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Base request object for ScPCA API — scpca_request","title":"Base request object for ScPCA API — scpca_request","text":"Base request object ScPCA API","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base request object for ScPCA API — scpca_request","text":"","code":"scpca_request(resource = \"\", body = list(), auth_token = \"\", ...)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base request object for ScPCA API — scpca_request","text":"resource API resource query, e.g. \"projects\", default \"\" (base URL) body optional named list include JSON body request auth_token optional API authentication token ... additional query parameters include request","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base request object for ScPCA API — scpca_request","text":"httr2 request object","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"Internal helper validate normalize formats ScPCA API","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"","code":"validate_format(format)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"format input format string","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"normalized format string API use","code":""}]
