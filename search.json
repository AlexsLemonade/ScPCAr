[{"path":"https://alexslemonade.github.io/ScPCAr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"BSD 3-Clause License","title":"BSD 3-Clause License","text":"Copyright (c) 2025, Alex’s Lemonade Stand Foundation Redistribution use source binary forms, without modification, permitted provided following conditions met: Redistributions source code must retain copyright notice, list conditions following disclaimer. Redistributions binary form must reproduce copyright notice, list conditions following disclaimer documentation /materials provided distribution. Neither name Alex’s Lemonade Stand Foundation names contributors may used endorse promote products derived software without specific prior written permission. SOFTWARE PROVIDED COPYRIGHT HOLDERS CONTRIBUTORS “” EXPRESS IMPLIED WARRANTIES, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE DISCLAIMED. EVENT SHALL COPYRIGHT HOLDER CONTRIBUTORS LIABLE DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, LIMITED , PROCUREMENT SUBSTITUTE GOODS SERVICES; LOSS USE, DATA, PROFITS; BUSINESS INTERRUPTION) HOWEVER CAUSED THEORY LIABILITY, WHETHER CONTRACT, STRICT LIABILITY, TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING WAY USE SOFTWARE, EVEN ADVISED POSSIBILITY DAMAGE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"ScPCAr package provides interface interact Single-cell Pediatric Cancer Atlas (ScPCA) Portal API. vignette demonstrates basic workflow discovering, downloading, working ScPCA data. vignette covers following tasks interacting ScPCA Portal: Listing available projects Selecting project exploring samples Obtaining authentication token Downloading data individual samples Loading data R","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"installing-the-scpcar-package","dir":"Articles","previous_headings":"","what":"Installing the ScPCAr Package","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"ScPCAr package currently available via GitHub. can install latest version using remotes package: can load ScPCAr package. Note vignette use ScPCAr:: calling functions package, clarity avoid possible namespace conflicts. also load SingleCellExperiment package later analysis.","code":"# Install remotes if needed if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  # Install ScPCAr from GitHub remotes::install_github(\"Alexslemonade/ScPCAr\") library(ScPCAr) library(SingleCellExperiment)"},{"path":[]},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"listing-all-projects","dir":"Articles","previous_headings":"Exploring available projects","what":"Listing all projects","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"First, let’s see projects available ScPCA Portal: scpca_projects() function returns data frame basic project metadata. default, returns simplified version list columns removed easier viewing. can see full structure additional data list diagnoses, data types, external accession numbers, etc., setting simplify = FALSE:","code":"# Get a data frame of all projects projects <- ScPCAr::scpca_projects()  # print out a portion of the data frame head(projects) ## # A tibble: 6 × 23 ##   scpca_project_id sample_count title    pi_name abstract additional_restricti…¹ ##   <chr>                   <int> <chr>    <chr>   <chr>    <chr>                  ## 1 SCPCP000001                23 Single … green_… Pediatr… Research or academic … ## 2 SCPCP000002                26 Single … green_… Pediatr… Research or academic … ## 3 SCPCP000003                59 Single … teache… Early T… Research or academic … ## 4 SCPCP000006                45 Single … murphy… Wilms t… Research or academic … ## 5 SCPCP000007                30 Single-… gawad   Bulk ge… Research or academic … ## 6 SCPCP000008               104 Single-… mullig… Acute l… Research or academic … ## # ℹ abbreviated name: ¹​additional_restrictions ## # ℹ 17 more variables: created_at <dttm>, downloadable_sample_count <int>, ## #   has_bulk_rna_seq <lgl>, has_cite_seq_data <lgl>, ## #   has_multiplexed_data <lgl>, has_single_cell_data <lgl>, ## #   has_spatial_data <lgl>, human_readable_pi_name <chr>, ## #   includes_anndata <lgl>, includes_cell_lines <lgl>, ## #   includes_merged_anndata <lgl>, includes_merged_sce <lgl>, … # Get the full project information including list columns projects_full <- ScPCAr::scpca_projects(simplify = FALSE)  # View the structure of the full data frame dplyr::glimpse(projects_full) ## Rows: 23 ## Columns: 37 ## $ scpca_project_id          <chr> \"SCPCP000001\", \"SCPCP000002\", \"SCPCP000003\",… ## $ sample_count              <int> 23, 26, 59, 45, 30, 104, 39, 42, 11, 33, 10,… ## $ title                     <chr> \"Single cell RNA sequencing of pediatric hig… ## $ pi_name                   <chr> \"green_mulcahy_levy\", \"green_mulcahy_levy\", … ## $ abstract                  <chr> \"Pediatric brain tumors are now the most com… ## $ additional_metadata_keys  <list> <\"development_stage_ontology_term_id\", \"dis… ## $ additional_restrictions   <chr> \"Research or academic purposes only\", \"Resea… ## $ computed_files            <list> [<data.frame[5 x 17]>], [<data.frame[5 x 17… ## $ contacts                  <list> [<data.frame[1 x 2]>], [<data.frame[1 x 2]>… ## $ created_at                <dttm> 2025-08-26, 2025-08-26, 2025-08-26, 2025-08… ## $ diagnoses_counts          <df[,56]> <data.frame[23 x 56]> ## $ diagnoses                 <list> <\"Anaplastic astrocytoma\", \"Anaplastic g… ## $ disease_timings           <list> <\"Metastatic recurrence of anaplastic pleom… ## $ downloadable_sample_count <int> 23, 26, 59, 43, 30, 104, 38, 42, 11, 33, 10… ## $ external_accessions       <list> [<data.frame[4 x 3]>], [<data.frame[0 x 0]>]… ## $ has_bulk_rna_seq          <lgl> TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE,… ## $ has_cite_seq_data         <lgl> FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE… ## $ has_multiplexed_data      <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TR… ## $ has_single_cell_data      <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… ## $ has_spatial_data          <lgl> FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FAL… ## $ human_readable_pi_name    <chr> \"Green/Mulcahy Levy\", \"Green/Mulcahy Levy\", … ## $ includes_anndata          <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… ## $ includes_cell_lines       <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA… ## $ includes_merged_anndata   <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, … ## $ includes_merged_sce       <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, … ## $ includes_xenografts       <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FAL… ## $ metadata_dataset_id       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ modalities                <list> <\"SINGLE_CELL\", \"BULK_RNA_SEQ\">, <\"SINGLE_CE… ## $ multiplexed_sample_count  <int> 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, … ## $ organisms                 <list> \"Homo sapiens\", \"Homo sapiens\", \"Homo sapien… ## $ publications              <list> [<data.frame[1 x 3]>], [<data.frame[0 x 0]>… ## $ samples                   <list> <\"SCPCS000001\", \"SCPCS000002\", \"SCPCS000003… ## $ seq_units                 <list> \"cell\", \"cell\", \"cell\", <\"nucleus\", \"spot\">… ## $ summaries                 <list> [<data.frame[7 x 5]>], [<data.frame[5 x 5]>… ## $ technologies              <list> \"10Xv3\", \"10Xv3\", \"10Xv3\", <\"10Xv3.1\", \"vis… ## $ unavailable_samples_count <int> 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0… ## $ updated_at                <dttm> 2025-08-26, 2025-08-26, 2025-08-26, 2025-08-…"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"getting-detailed-project-information","dir":"Articles","previous_headings":"Exploring available projects","what":"Getting detailed project information","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"Now let’s get detailed information samples selected project. use first project, SCPCP000001, example. According project info , samples study pediatric high-grade gliomas. can get detailed information project using project_id, set simplifyVector = TRUE convert simple lists vectors possible. returns list detailed information project samples within. can explore full structure list str() dplyr::glimpse(), now just look components might interest. example, can look set diagnoses present, counts: Similarly, can look data modalities available project, includes single-cell bulk RNA-seq data:","code":"project_id <- \"SCPCP000001\"  # Get detailed project metadata project_info <- ScPCAr::get_project_info(project_id) data.frame(count = unlist(project_info$diagnoses_counts)) |>   tibble::rownames_to_column(\"diagnosis\") ##                       diagnosis count ## 1                  Glioblastoma    16 ## 2                 Non-cancerous     1 ## 3             Anaplastic glioma     1 ## 4             High-grade glioma     2 ## 5        Anaplastic astrocytoma     1 ## 6        Diffuse midline glioma     1 ## 7 Pleomorphic xanthoastrocytoma     1 project_info$modalities ## [1] \"SINGLE_CELL\"  \"BULK_RNA_SEQ\""},{"path":[]},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"getting-sample-metadata","dir":"Articles","previous_headings":"Exploring sample information","what":"Getting sample metadata","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"Let’s look samples within selected project:","code":"# Get sample information for the project samples <- ScPCAr::get_project_samples(project_id) head(samples) ## # A tibble: 6 × 34 ##   scpca_sample_id scpca_project_id outcome  organism submitter_id participant_id ##   <chr>           <chr>            <chr>    <chr>    <chr>        <chr>          ## 1 SCPCS000001     SCPCP000001      PFS 11 … Homo sa… 834          834            ## 2 SCPCS000002     SCPCP000001      PFS 11 … Homo sa… 1107         1107           ## 3 SCPCS000003     SCPCP000001      PFS 7 m… Homo sa… 1115         1115           ## 4 SCPCS000004     SCPCP000001      PFS 3 m… Homo sa… 1431         1431           ## 5 SCPCS000005     SCPCP000001      PFS 3 m… Homo sa… 1437         1437           ## 6 SCPCS000006     SCPCP000001      Stable … Homo sa… 1458         1458           ## # ℹ 28 more variables: organism_ontology_id <chr>, sex_ontology_term_id <chr>, ## #   tissue_ontology_term_id <chr>, disease_ontology_term_id <chr>, ## #   molecular_characteristics <chr>, spinal_leptomeningeal_mets <chr>, ## #   development_stage_ontology_term_id <chr>, ## #   self_reported_ethnicity_ontology_term_id <chr>, age <dbl>, ## #   age_timing <chr>, created_at <dttm>, demux_cell_count_estimate_sum <lgl>, ## #   diagnosis <chr>, disease_timing <chr>, has_bulk_rna_seq <lgl>, …"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"getting-detailed-sample-information","dir":"Articles","previous_headings":"Exploring sample information","what":"Getting detailed sample information","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"can also get detailed information specific sample:","code":"sample_id <- \"SCPCS000001\" # Get detailed sample metadata sample_detail <- ScPCAr::get_sample_info(sample_id) str(sample_detail, max.level = 1) ## List of 28 ##  $ additional_metadata          :List of 12 ##  $ age                          : chr \"14\" ##  $ age_timing                   : chr \"diagnosis\" ##  $ computed_files               :'data.frame':   2 obs. of  17 variables: ##  $ created_at                   : chr \"2025-08-26T07:31:52.502575Z\" ##  $ demux_cell_count_estimate_sum: NULL ##  $ diagnosis                    : chr \"Anaplastic glioma\" ##  $ disease_timing               : chr \"Initial diagnosis\" ##  $ has_bulk_rna_seq             : logi TRUE ##  $ has_cite_seq_data            : logi FALSE ##  $ has_multiplexed_data         : logi FALSE ##  $ has_single_cell_data         : logi TRUE ##  $ has_spatial_data             : logi FALSE ##  $ includes_anndata             : logi TRUE ##  $ is_cell_line                 : logi FALSE ##  $ is_xenograft                 : logi FALSE ##  $ modalities                   : chr [1:2] \"SINGLE_CELL\" \"BULK_RNA_SEQ\" ##  $ multiplexed_with             : list() ##  $ project                      :List of 37 ##  $ sample_cell_count_estimate   : int 3422 ##  $ scpca_id                     : chr \"SCPCS000001\" ##  $ seq_units                    : chr [1:2] \"bulk\" \"cell\" ##  $ sex                          : chr \"F\" ##  $ subdiagnosis                 : chr \"NA\" ##  $ technologies                 : chr [1:2] \"10Xv3\" \"paired_end\" ##  $ tissue_location              : chr \"Right thalamus/midbrain\" ##  $ treatment                    : chr \"Debulking, RT, irinotecan/cetuximab\" ##  $ updated_at                   : chr \"2025-08-26T07:31:52.502598Z\" # Check which data modalities are available for this sample sample_detail$modalities ## [1] \"SINGLE_CELL\"  \"BULK_RNA_SEQ\""},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"authentication","dir":"Articles","previous_headings":"","what":"Authentication","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"download actual data files, need agree terms service obtain authentication token. view terms service web browser, run view_terms(). can use get_auth() function, providing email address agreeing terms service: Important Notes: must set agree = TRUE indicate accept terms service Replace \".email@example.com\" actual email address Keep token secure don’t share publicly","code":"# Get an authentication token # Replace with your actual email address my_email <- \"your.email@example.com\" auth_token <- ScPCAr::get_auth(email = my_email, agree = TRUE)"},{"path":[]},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"downloading-singlecellexperiment-objects","dir":"Articles","previous_headings":"Downloading data for an ScPCA sample","what":"Downloading SingleCellExperiment objects","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"Now can download data selected sample. use download_sample() function, specifying sample ID, authentication token, desired destination directory, file format. function download unpack files associated sample, return list file paths downloaded files Let’s start SingleCellExperiment format:","code":"# Download SingleCellExperiment data for our sample # This will create a directory structure under \"scpca_data/\" file_paths <- ScPCAr::download_sample(   sample_id = \"SCPCS000001\",   auth_token = auth_token,   destination = \"scpca_data\",   format = \"sce\" )  # List the files that were downloaded file_paths ## [1] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/README.md\"                        ## [2] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/SCPCL000001_celltype-report.html\" ## [3] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/SCPCL000001_filtered.rds\"         ## [4] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/SCPCL000001_processed.rds\"        ## [5] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/SCPCL000001_qc.html\"              ## [6] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/SCPCL000001_unfiltered.rds\"       ## [7] \"scpca_data/SCPCS000001_SINGLE-CELL_SINGLE-CELL-EXPERIMENT_2025-10-17/single_cell_metadata.tsv\""},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"understanding-the-downloaded-file-structure","dir":"Articles","previous_headings":"Downloading data for an ScPCA sample","what":"Understanding the downloaded file structure","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"standard download SingleCellExperiment data sample create directory structure like : Note library_id sample_id often different numbers, single sample may sequenced across multiple libraries. details contents files, see ScPCA Portal documentation.","code":"scpca_data/ └── {sample_id}_{MODALITY}_{FORMAT}_{YYYY-MM-DD}/     ├── README.md     ├── single_cell_metadata.tsv     ├── {library_id}_filtered.rds     ├── {library_id}_processed.rds     ├── {library_id}_unfiltered.rds     ├── {library_id}_qc.html     └── {library_id}_celltype-report.html"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"loading-data-into-r","dir":"Articles","previous_headings":"Downloading data for an ScPCA sample","what":"Loading data into R","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"Now let’s load processed data sample. First select processed SingleCellExperiment file downloaded paths, use readRDS() load .","code":"# select the processed SCE file using a pattern match for the file name. processed_sce_files <- stringr::str_subset(file_paths, \"_processed\\\\.rds$\")  # Load the first (in this case only) SingleCellExperiment object sce <- readRDS(processed_sce_files[1])  # View a summary of the object sce ## class: SingleCellExperiment  ## dim: 60319 2628  ## metadata(40): library_id sample_id ... cellassign_reference_version ##   cellassign_reference_organs ## assays(3): counts spliced logcounts ## rownames(60319): ENSG00000223972 ENSG00000243485 ... ENSG00000273496 ##   ENSG00000274175 ## rowData names(4): gene_ids gene_symbol mean detected ## colnames(2628): GTTCGCTGTTCTCTCG CTCTCAGCATGGATCT ... TCATACTTCTGCGAGC ##   TCTCACGAGGACGGAG ## colData names(19): barcodes sum ... consensus_celltype_annotation ##   consensus_celltype_ontology ## reducedDimNames(2): PCA UMAP ## mainExpName: NULL ## altExpNames(0):"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"working-with-the-singlecellexperiment-object","dir":"Articles","previous_headings":"Downloading data for an ScPCA sample","what":"Working with the SingleCellExperiment object","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"loaded, can work SingleCellExperiment object using standard Bioconductor tools. information contents SingleCellExperiment objects provided ScPCA, see ScPCA Portal documentation. course can make standard plots, UMAP colored consensus cell type annotation.","code":"# Access count data counts <- counts(sce) dim(counts) ## [1] 60319  2628 # Access cell metadata cell_metadata <- colData(sce) head(cell_metadata) ## DataFrame with 6 rows and 19 columns ##                          barcodes       sum  detected subsets_mito_sum ##                       <character> <numeric> <integer>        <numeric> ## GTTCGCTGTTCTCTCG GTTCGCTGTTCTCTCG     57012      9097             1494 ## CTCTCAGCATGGATCT CTCTCAGCATGGATCT     52113      8625             4064 ## TCAGCCTCAGGTATGG TCAGCCTCAGGTATGG     49759      8650             5253 ## CCTTGTGGTCCATAGT CCTTGTGGTCCATAGT     58121      9177             3540 ## AGCGCCATCTTCGACC AGCGCCATCTTCGACC     51639      8570             5607 ## CTGTAGATCCATAGGT CTGTAGATCCATAGGT     53179      8962             6712 ##                  subsets_mito_detected subsets_mito_percent     total ##                              <integer>            <numeric> <numeric> ## GTTCGCTGTTCTCTCG                    13              2.62050     57012 ## CTCTCAGCATGGATCT                    14              7.79844     52113 ## TCAGCCTCAGGTATGG                    14             10.55688     49759 ## CCTTGTGGTCCATAGT                    14              6.09074     58121 ## AGCGCCATCTTCGACC                    14             10.85807     51639 ## CTGTAGATCCATAGGT                    14             12.62152     53179 ##                  prob_compromised miQC_pass scpca_filter sizeFactor  cluster ##                         <numeric> <logical>  <character>  <numeric> <factor> ## GTTCGCTGTTCTCTCG      6.09745e-06      TRUE         Keep    5.03806        1 ## CTCTCAGCATGGATCT      8.68181e-06      TRUE         Keep    3.50519        1 ## TCAGCCTCAGGTATGG      2.67246e-06      TRUE         Keep    3.59865        1 ## CCTTGTGGTCCATAGT      7.71935e-07      TRUE         Keep    4.48946        1 ## AGCGCCATCTTCGACC      3.74199e-06      TRUE         Keep    3.38054        1 ## CTGTAGATCCATAGGT      2.00608e-07      TRUE         Keep    3.53366        1 ##                  singler_celltype_ontology singler_celltype_annotation ##                                <character>                 <character> ## GTTCGCTGTTCTCTCG                CL:0000540                      neuron ## CTCTCAGCATGGATCT                CL:0000540                      neuron ## TCAGCCTCAGGTATGG                CL:0000540                      neuron ## CCTTGTGGTCCATAGT                CL:0000540                      neuron ## AGCGCCATCTTCGACC                CL:0000540                      neuron ## CTGTAGATCCATAGGT                CL:0000540                      neuron ##                  cellassign_celltype_annotation cellassign_celltype_ontology ##                                     <character>                  <character> ## GTTCGCTGTTCTCTCG            Gamma delta T cells                   CL:0000798 ## CTCTCAGCATGGATCT               Purkinje neurons                   CL:0000121 ## TCAGCCTCAGGTATGG               Purkinje neurons                   CL:0000121 ## CCTTGTGGTCCATAGT            Gamma delta T cells                   CL:0000798 ## AGCGCCATCTTCGACC               Purkinje neurons                   CL:0000121 ## CTGTAGATCCATAGGT               Purkinje neurons                   CL:0000121 ##                  cellassign_max_prediction consensus_celltype_annotation ##                                  <numeric>                   <character> ## GTTCGCTGTTCTCTCG                  1.000000                       Unknown ## CTCTCAGCATGGATCT                  1.000000                        neuron ## TCAGCCTCAGGTATGG                  0.963709                        neuron ## CCTTGTGGTCCATAGT                  1.000000                       Unknown ## AGCGCCATCTTCGACC                  1.000000                        neuron ## CTGTAGATCCATAGGT                  1.000000                        neuron ##                  consensus_celltype_ontology ##                                  <character> ## GTTCGCTGTTCTCTCG                          NA ## CTCTCAGCATGGATCT                  CL:0000540 ## TCAGCCTCAGGTATGG                  CL:0000540 ## CCTTGTGGTCCATAGT                          NA ## AGCGCCATCTTCGACC                  CL:0000540 ## CTGTAGATCCATAGGT                  CL:0000540 # Access gene metadata gene_metadata <- rowData(sce) head(gene_metadata) ## DataFrame with 6 rows and 4 columns ##                        gene_ids gene_symbol        mean  detected ##                     <character> <character>   <numeric> <numeric> ## ENSG00000223972 ENSG00000223972     DDX11L1 0.000380518 0.0380518 ## ENSG00000243485 ENSG00000243485 MIR1302-2HG 0.000000000 0.0000000 ## ENSG00000284332 ENSG00000284332   MIR1302-2 0.000000000 0.0000000 ## ENSG00000268020 ENSG00000268020      OR4G4P 0.000000000 0.0000000 ## ENSG00000240361 ENSG00000240361     OR4G11P 0.000000000 0.0000000 ## ENSG00000186092 ENSG00000186092       OR4F5 0.000000000 0.0000000 # View the UMAP, colored by consensus cell type scater::plotUMAP(sce, color_by = \"consensus_celltype_annotation\") +   ggplot2::guides(color = ggplot2::guide_legend(title=\"Cell type\")) +   ggplot2::theme_classic() +   # remove axis ticks   ggplot2::theme(     axis.ticks = ggplot2::element_blank(),     axis.text = ggplot2::element_blank()   )"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"downloading-data-in-anndatah5ad-format","dir":"Articles","previous_headings":"Downloading data for an ScPCA sample","what":"Downloading data in AnnData/H5AD format","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"ScPCAr also supports downloading data AnnData (H5AD) format, commonly used Python-based single-cell analysis workflows: expected files downloading samples format, see ScPCA Portal AnnData docs.","code":"# Download the same sample in H5AD format file_paths_h5ad <- ScPCAr::download_sample(   sample_id = sample_id,   auth_token = auth_token,   destination = \"scpca_data\",   format = \"anndata\" )"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"downloading-projects","dir":"Articles","previous_headings":"","what":"Downloading projects","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"addition downloading data single sample, ScPCAr provides function download entire project, fittingly named download_project(). function takes project id authentication token required input, like download_sample function allows specify destination format downloaded files. also options, ability download merged object containing samples project, whether include multiplexed samples, multiple samples pooled sequenced together, demultiplexed. Please see function documentation information.","code":"# Download an entire project in SingleCellExperiment format, # with separate files for each sample (default behavior). project_file_paths <- ScPCAr::download_project(   project_id = project_id,   auth_token = auth_token,   destination = \"scpca_data\",   format = \"sce\" )  # Download an entire project in SingleCellExperiment format, # with all samples merged into a single object (but not integrated!). project_file_paths <- ScPCAr::download_project(   project_id = project_id,   auth_token = auth_token,   destination = \"scpca_data\",   format = \"sce\",   merged = TRUE )"},{"path":"https://alexslemonade.github.io/ScPCAr/articles/ScPCAr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Using the ScPCAr package to access Single-cell Pediatric Cancer Atlas data","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.7.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0 ##  [3] Biobase_2.66.0              GenomicRanges_1.58.0        ##  [5] GenomeInfoDb_1.42.3         IRanges_2.40.1              ##  [7] S4Vectors_0.44.0            BiocGenerics_0.52.0         ##  [9] MatrixGenerics_1.18.1       matrixStats_1.4.1           ## [11] ScPCAr_0.1.0                testthat_3.2.3              ##  ## loaded via a namespace (and not attached): ##   [1] gridExtra_2.3           httr2_1.2.1             remotes_2.5.0           ##   [4] rlang_1.1.6             magrittr_2.0.3          scater_1.34.1           ##   [7] compiler_4.4.3          vctrs_0.6.5             stringr_1.5.1           ##  [10] profvis_0.4.0           pkgconfig_2.0.3         crayon_1.5.3            ##  [13] fastmap_1.2.0           XVector_0.46.0          ellipsis_0.3.2          ##  [16] labeling_0.4.3          scuttle_1.16.0          utf8_1.2.5              ##  [19] promises_1.3.0          sessioninfo_1.2.2       tzdb_0.5.0              ##  [22] UCSC.utils_1.2.0        ggbeeswarm_0.7.2        purrr_1.0.2             ##  [25] xfun_0.52               zlibbioc_1.52.0         cachem_1.1.0            ##  [28] beachmat_2.22.0         jsonlite_2.0.0          later_1.3.2             ##  [31] DelayedArray_0.32.0     BiocParallel_1.40.2     irlba_2.3.5.1           ##  [34] parallel_4.4.3          R6_2.6.1                stringi_1.8.7           ##  [37] pkgload_1.4.0           brio_1.1.5              Rcpp_1.0.13             ##  [40] knitr_1.50              usethis_3.1.0           readr_2.1.5             ##  [43] httpuv_1.6.15           Matrix_1.7-0            tidyselect_1.2.1        ##  [46] viridis_0.6.5           rstudioapi_0.17.1       abind_1.4-8             ##  [49] yaml_2.3.10             codetools_0.2-20        miniUI_0.1.1.1          ##  [52] curl_7.0.0              pkgbuild_1.4.6          lattice_0.22-6          ##  [55] tibble_3.2.1            shiny_1.9.1             withr_3.0.2             ##  [58] evaluate_1.0.3          desc_1.4.3              urlchecker_1.0.1        ##  [61] pillar_1.10.2           generics_0.1.4          rprojroot_2.0.4         ##  [64] hms_1.1.3               ggplot2_3.5.1           munsell_0.5.1           ##  [67] scales_1.3.0            xtable_1.8-4            glue_1.8.0              ##  [70] tools_4.4.3             BiocNeighbors_2.0.1     ScaledMatrix_1.14.0     ##  [73] fs_1.6.6                cowplot_1.1.3           grid_4.4.3              ##  [76] tidyr_1.3.1             devtools_2.4.5          colorspace_2.1-1        ##  [79] GenomeInfoDbData_1.2.13 beeswarm_0.4.0          BiocSingular_1.22.0     ##  [82] vipor_0.4.7             cli_3.6.5               rsvd_1.0.5              ##  [85] rappdirs_0.3.3          viridisLite_0.4.2       S4Arrays_1.6.0          ##  [88] dplyr_1.1.4             gtable_0.3.5            digest_0.6.37           ##  [91] ggrepel_0.9.6           SparseArray_1.6.2       farver_2.1.2            ##  [94] htmlwidgets_1.6.4       memoise_2.0.1           htmltools_0.5.8.1       ##  [97] lifecycle_1.0.4         httr_1.4.7              here_1.0.1              ## [100] mime_0.13"},{"path":"https://alexslemonade.github.io/ScPCAr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua . Shapiro. Author, maintainer. Stephanie J. Spielman. Author. Alex's Lemonade Stand Foundation. Copyright holder, funder.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hawkins AG, Shapiro JA, Spielman SJ, Mejia DS, Venkatesh Prasad D, Ichihara N, Yakovets , Gottlieb , Wheeler KG, Bethell CJ, Foltz SM, O'Malley J, Greene CS, Taroni JN (2025). “Single-cell Pediatric Cancer Atlas: Data portal open-source tools single-cell transcriptomics pediatric tumors.” bioRxiv. doi:10.1101/2024.04.19.590243, https://www.biorxiv.org/content/early/2025/05/28/2024.04.19.590243.","code":"@Article{,   author = {Allegra G. Hawkins and Joshua A. Shapiro and Stephanie J. Spielman and David S. Mejia and Deepashree {Venkatesh Prasad} and Nozomi Ichihara and Arkadii Yakovets and Avrohom M. Gottlieb and Kurt G. Wheeler and Chante J. Bethell and Steven M. Foltz and Jennifer O'Malley and Casey S. Greene and Jaclyn N. Taroni},   title = {The Single-cell Pediatric Cancer Atlas: Data portal and open-source tools for single-cell transcriptomics of pediatric tumors},   year = {2025},   doi = {10.1101/2024.04.19.590243},   publisher = {Cold Spring Harbor Laboratory},   abstract = {The Single-cell Pediatric Cancer Atlas (ScPCA) Portal (https://scpca.alexslemonade.org/) is a data resource for uniformly processed single-cell and single-nuclei RNA sequencing (RNA-seq) data and de-identified metadata from pediatric tumor samples. Originally comprised of data from 10 projects funded by Alex{\textquoteright}s Lemonade Stand Foundation (ALSF), the Portal currently contains summarized gene expression data for over 700 samples across 55 cancer types from ALSF-funded and community-contributed datasets. Downloads include gene expression data as SinglecellExperiment or AnnData objects containing raw and normalized counts, PCA and UMAP coordinates, and automated cell type annotations, along with summary reports. Some samples have additional data from bulk RNA-seq, spatial transcriptomics, and/or feature barcoding (e.g., CITE-seq and cell hashing) included in the download. All data on the Portal were uniformly processed using scpca-nf, an efficient and open-source Nextflow workflow that uses alevin-fry to quantify gene expression. Comprehensive documentation, including descriptions of file contents and a guide to getting started, is available at https://scpca.readthedocs.io.},   url = {https://www.biorxiv.org/content/early/2025/05/28/2024.04.19.590243},   journal = {bioRxiv}, }"},{"path":"https://alexslemonade.github.io/ScPCAr/index.html","id":"scpcar","dir":"","previous_headings":"","what":"Interact with the ScPCA Portal API","title":"Interact with the ScPCA Portal API","text":"R package interacting Single-cell Pediatric Cancer Atlas (ScPCA) Portal API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interact with the ScPCA Portal API","text":"ScPCAr package can installed GitHub repository using remotes package:","code":"remotes::install_github(\"AlexsLemonade/ScPCAr\")"},{"path":"https://alexslemonade.github.io/ScPCAr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Interact with the ScPCA Portal API","text":"package provides functions get metadata download data ScPCA Portal within R. code chunk shows example authenticate download single sample portal. detailed usage instructions, please refer package documentation.","code":"library(ScPCAr)  # First, look at the terms of use view_terms()  # Get an authentication token for use with the ScPCA Portal auth_token <- get_auth(email = \"your.email@example.com\", agree = TRUE)  # Get the sample metadata for a project sample_metadata <- get_sample_metadata(project_id = \"SCPCP000001\")  # Download a data for a sample # this function returns a vector of the downloaded file paths file_paths <- download_sample(   sample_id = \"SCPCS000001\",   auth_token = auth_token,   destination = \"scpca_data\",   format = \"sce\" )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/check_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the ScPCA API is reachable — check_api","title":"Check if the ScPCA API is reachable — check_api","text":"function performs simple GET request ScPCA API verify reachable.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/check_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the ScPCA API is reachable — check_api","text":"","code":"check_api()"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/check_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the ScPCA API is reachable — check_api","text":"TRUE API reachable, otherwise error raised.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to create a filtering list for computed files by format — computed_files_filter","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"Helper function create filtering list computed files format","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"","code":"computed_files_filter(   format_str = c(\"SINGLE_CELL_EXPERIMENT\", \"ANN_DATA\", \"SPATIAL\") )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"format_str string indicating desired format","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/computed_files_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to create a filtering list for computed files by format — computed_files_filter","text":"list suitable passing filters argument get_computed_file_ids().","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and extract a single file from a URL — download_and_extract_file","title":"Download and extract a single file from a URL — download_and_extract_file","text":"Download extract single file URL","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and extract a single file from a URL — download_and_extract_file","text":"","code":"download_and_extract_file(url, parent_dir, overwrite, redownload, quiet)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and extract a single file from a URL — download_and_extract_file","text":"url download URL parent_dir parent directory files extracted overwrite Whether overwrite existing directories redownload Whether re-download files url already exist (FALSE, existing files returned) quiet Whether suppress progress messages","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_and_extract_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and extract a single file from a URL — download_and_extract_file","text":"character vector extracted file paths","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a project's data files from the ScPCA Portal — download_project","title":"Download a project's data files from the ScPCA Portal — download_project","text":"Download project's data files ScPCA Portal","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a project's data files from the ScPCA Portal — download_project","text":"","code":"download_project(   project_id,   auth_token,   destination = \"scpca_data\",   format = \"sce\",   merged = FALSE,   include_multiplexed = NULL,   overwrite = FALSE,   redownload = FALSE,   quiet = FALSE )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a project's data files from the ScPCA Portal — download_project","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") auth_token authorization token obtained get_auth() destination path directory unzipped file directory saved. Default \"scpca_data\". format desired file format, either \"sce\" (SingleCellExperiment), \"anndata\" (AnnData/H5AD), \"spatial\" (spatial data Space Ranger format). Default \"sce\". merged Download merged data files, available. Default FALSE. include_multiplexed Include multiplexed samples, available. Default TRUE SingleCellExperiment FALSE AnnData spatial samples, multiplexed data available. overwrite Whether overwrite files existing directories already exist. Note files existing directories name one downloaded files deleted. Default FALSE. redownload Whether re-download files project format already exist. FALSE, existing files returned. Default FALSE. quiet Whether suppress download progress messages. Default FALSE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a project's data files from the ScPCA Portal — download_project","text":"vector file paths downloaded files (invisibly)","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a project's data files from the ScPCA Portal — download_project","text":"","code":"if (FALSE) { # \\dontrun{ # Get a token first auth_token <- get_auth(\"your.email@example.com\", agree = TRUE) # Then ask for a sample download download_project(\"SCPCS000001\", auth_token, destination = \"scpca_data\", format = \"sce\")  # Downloading merged files in AnnData format download_project(   \"SCPCS000001\",   auth_token,   destination = \"scpca_data\",   format = \"anndata\",   merged = TRUE ) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a sample's data files from the ScPCA Portal — download_sample","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"function downloads data files specified sample ScPCA Portal. downloaded files saved subdirectory specified path, named base filename downloaded zip file, includes sample ID, modality, format, date.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"","code":"download_sample(   sample_id,   auth_token,   destination = \"scpca_data\",   format = \"sce\",   overwrite = FALSE,   redownload = FALSE,   quiet = FALSE )"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"sample_id ScPCA sample ID (e.g. \"SCPCS000001\") auth_token authorization token obtained get_auth() destination path directory unzipped file directory saved. Default \"scpca_data\". format desired file format, either \"sce\" (SingleCellExperiment), \"anndata\" (AnnData/H5AD), \"spatial\" (spatial data Space Ranger format). Default \"sce\". overwrite Whether overwrite files existing directories already exist. Note files existing directories name one downloaded files deleted. Default FALSE. redownload Whether re-download files sample format already exist. FALSE, existing files returned. Default FALSE. quiet Whether suppress download progress messages. Default FALSE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"vector file paths downloaded files (invisibly)","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"single-cell single-nuclei data, files can downloaded either SingleCellExperiment (\"sce\") AnnData (\"anndata\") format, downloads include unfiltered, filtered, processed data objects, well associated metadata QC files. Spatial data, present, can downloaded Space Ranger format using \"spatial\" format option. function returns vector file paths downloaded files (invisibly). Note downloading data requires authorization token, can obtained using get_auth() function.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/download_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a sample's data files from the ScPCA Portal — download_sample","text":"","code":"if (FALSE) { # \\dontrun{ # Get a token first auth_token <- get_auth(\"your.email@example.com\", agree = TRUE) # Then ask for a sample download download_sample(\"SCPCS000001\", auth_token, destination = \"scpca_data\", format = \"sce\")  # Downloading in AnnData format download_sample(\"SCPCS000001\", auth_token, destination = \"scpca_data\", format = \"anndata\") } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an authorization token from the ScPCA API — get_auth","title":"Get an authorization token from the ScPCA API — get_auth","text":"get_auth() allows obtaining authorization token string ScPCA API, providing email address agreeing terms use.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an authorization token from the ScPCA API — get_auth","text":"","code":"get_auth(email, agree = FALSE)  view_terms()"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an authorization token from the ScPCA API — get_auth","text":"email user's email address agree logical indicating whether user agrees terms service","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an authorization token from the ScPCA API — get_auth","text":"string containing authorization token","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an authorization token from the ScPCA API — get_auth","text":"view terms use agreeing , use view_terms(), opens terms use page web browser.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an authorization token from the ScPCA API — get_auth","text":"","code":"if (FALSE) { # \\dontrun{ # Get a token (make sure to agree to the terms of service) auth_token <- get_auth(\"your.email@example.com\", agree = TRUE) } # }  if (FALSE) { # \\dontrun{ view_terms() } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"Get computed file ids sample info list, optionally filtered criteria","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"","code":"get_computed_file_ids(info_list, filters = list())"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"info_list list object includes \"computed_files\" element, returned get_sample_info() get_project_info() filters named list filtering criteria, names fields computed_files objects, values desired values match. Values can negated prefixing \"!\". example, get non-spatial computed files SingleCellExperiment format, use: list(format = \"SINGLE_CELL_EXPERIMENT\", modality = \"!SPATIAL\").","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_computed_file_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get computed file ids from a sample info list, optionally filtered by criteria — get_computed_file_ids","text":"character vector computed file ids matching filtering criteria","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get project metadata by project ID — get_project_info","title":"Get project metadata by project ID — get_project_info","text":"Get project metadata project ID","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get project metadata by project ID — get_project_info","text":"","code":"get_project_info(project_id, simplifyVector = TRUE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get project metadata by project ID — get_project_info","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") simplifyVector Simplify returned list structure, creating vectors data frames instead lists possible. Default TRUE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get project metadata by project ID — get_project_info","text":"nested list project metadata ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get project metadata by project ID — get_project_info","text":"","code":"if (FALSE) { # \\dontrun{ # Get metadata for a specific project project_info <- get_project_info(\"SCPCP000001\") } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata for all libraries in a given project — get_project_libraries","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"function downloads reads library metadata file given ScPCA project. data frame returned project metadata file available ScPCA Portal website project, including information library part project.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"","code":"get_project_libraries(project_id, auth_token)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") auth_token authorization token obtained get_auth()","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"data frame (tibble) library metadata specified project.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_libraries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata for all libraries in a given project — get_project_libraries","text":"","code":"if (FALSE) { # \\dontrun{ # First get an auth token token <- get_auth(\"me@email.net\", agree = TRUE) # Get library metadata for a specific project libraries_df <- get_project_libraries(\"SCPCP000001\", token) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get project metadata download URL — get_project_metadata_url","title":"Get project metadata download URL — get_project_metadata_url","text":"Get project metadata download URL","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get project metadata download URL — get_project_metadata_url","text":"","code":"get_project_metadata_url(project_id, auth_token)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get project metadata download URL — get_project_metadata_url","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") auth_token authorization token obtained get_auth()","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get project metadata download URL — get_project_metadata_url","text":"signed download URL project metadata file found ScPCA Portal.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_metadata_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get project metadata download URL — get_project_metadata_url","text":"","code":"if (FALSE) { # \\dontrun{ # First get an auth token token <- get_auth(\"me@email.net\", agree = TRUE) # Get metadata for a specific project project_info <- get_project_metadata_url(\"SCPCP000001\", token) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame of all samples in a given project — get_project_samples","title":"Get a data frame of all samples in a given project — get_project_samples","text":"function retrievs data frame biological samples associated SCPCA project, including sample-level metadata. default, list columns removed create simplified data frame, can disabled setting simplify = FALSE. unsimplified data frame contains nested list columns additional details, experimental modalities associated sample.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame of all samples in a given project — get_project_samples","text":"","code":"get_project_samples(project_id, simplify = TRUE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a data frame of all samples in a given project — get_project_samples","text":"project_id ScPCA project ID (e.g. \"SCPCP000001\") simplify logical indicating whether simplify resulting data frame removing list columns. Default TRUE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame of all samples in a given project — get_project_samples","text":"data frame (tibble) sample information specified project ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_project_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a data frame of all samples in a given project — get_project_samples","text":"","code":"if (FALSE) { # \\dontrun{ # Get sample info for a specific project samples_df <- get_project_samples(\"SCPCP000001\")  # Get sample info without simplifying samples_df_full <- get_project_samples(\"SCPCP000001\", simplify = FALSE) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample metadata by sample ID — get_sample_info","title":"Get sample metadata by sample ID — get_sample_info","text":"Get sample metadata sample ID","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample metadata by sample ID — get_sample_info","text":"","code":"get_sample_info(sample_id, simplifyVector = TRUE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample metadata by sample ID — get_sample_info","text":"sample_id ScPCA sample ID (e.g. \"SCPCS000001\") simplifyVector Simplify returned list structure, creating vectors data frames instead lists possible. Default TRUE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sample metadata by sample ID — get_sample_info","text":"nested list sample metadata ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/get_sample_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sample metadata by sample ID — get_sample_info","text":"","code":"if (FALSE) { # \\dontrun{ # Get metadata for a specific sample sample_info <- get_sample_info(\"SCPCS000001\") } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"Helper function iterating paginated ScPCA API results","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"","code":"iterate_scpca(resp, req)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"resp httr2 response object req httr2 request object","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/iterate_scpca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for iterating through paginated ScPCA API results — iterate_scpca","text":"updated httr2 request object next page, NULL pages","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the base filename from a ScPCA portal download URL — parse_download_file","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"(may become obsolete get download filenames API response)","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"","code":"parse_download_file(scpca_url)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"scpca_url ScPCA portal download URL","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/parse_download_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the base filename from a ScPCA portal download URL — parse_download_file","text":"download filename","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data frame of all ScPCA projects — scpca_projects","title":"Get data frame of all ScPCA projects — scpca_projects","text":"retrieves full list projects ScPCA Portal returns data frame project metadata. default, list columns removed create simplified data frame, can disabled setting simplify = FALSE. unsimplified data frame contains nested list columns additional details samples within project, set diagnoses associated project individual sample ids.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data frame of all ScPCA projects — scpca_projects","text":"","code":"scpca_projects(simplify = TRUE)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data frame of all ScPCA projects — scpca_projects","text":"simplify logical indicating whether simplify resulting data frame removing list columns. Default TRUE.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data frame of all ScPCA projects — scpca_projects","text":"data frame (tibble) project information ScPCA API.","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data frame of all ScPCA projects — scpca_projects","text":"","code":"if (FALSE) { # \\dontrun{ # a simplified data frame of all projects project_df <- scpca_projects()  # a data frame of all projects without simplification project_df_full <- scpca_projects(simplify = FALSE) } # }"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Base request object for ScPCA API — scpca_request","title":"Base request object for ScPCA API — scpca_request","text":"Base request object ScPCA API","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base request object for ScPCA API — scpca_request","text":"","code":"scpca_request(resource = \"\", body = list(), auth_token = \"\", ...)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base request object for ScPCA API — scpca_request","text":"resource API resource query, e.g. \"projects\", default \"\" (base URL) body optional named list include JSON body request auth_token optional API authentication token ... additional query parameters include request","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/scpca_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base request object for ScPCA API — scpca_request","text":"httr2 request object","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"Internal helper validate normalize formats ScPCA API","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"","code":"validate_format(format)"},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"format input format string","code":""},{"path":"https://alexslemonade.github.io/ScPCAr/reference/validate_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal helper to validate and normalize formats for the ScPCA API — validate_format","text":"normalized format string API use","code":""}]
